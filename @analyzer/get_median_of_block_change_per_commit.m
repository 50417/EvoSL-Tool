function [blocktype_changetype,median_of_change] = get_median_of_block_change_per_commit(obj)
%GET_MEDIAN_OF_BLOCK_CHANGE_PER_COMMIT 
% DEPRECATED : The following query will find the median of the block type
% and change type median across the commit the (block type,change type) are
% associated with (NOT ENTIRE COMMIT)
    median_query = ['SELECT distinct Block_Type, change_type,'...
                    'AVG('...
                    ' CASE counter%2'... 
                    ' WHEN 0 THEN CASE WHEN rn in (counter/2, counter /2 +1) THEN totalCount END '...
                    ' WHEN 1 THEN CASE WHEN rn = counter/ 2 + 1 THEN totalCount END '...
                    ' END)'... 
                    ' OVER (partition by Block_Type, change_type) median'...
                    ' FROM ('...
                    ' SELECT *, row_number() OVER (PARTITION  BY Block_Type, change_type order by totalCount) rn,'...
                    ' count(*) over (PARTITION by Block_Type, change_type) counter'...
                    ' FROM ('...
                    ' SELECT'... 
                    ' parent_sha, child_sha, Block_Type,'...      
                    ' CASE'...  
                    ' WHEN is_deleted > 0 THEN "Deleted"'...  
                    ' WHEN is_added > 0 THEN "Added"  '...
                    ' WHEN is_modified > 0 THEN "Modified"  '...
                    ' WHEN is_renamed > 0 THEN "Renamed"'...  
                    ' END AS change_type,totalCount  '...
                    ' FROM (	'... 
                    ' SELECT parent_sha, child_sha, Block_Type, is_deleted, is_added, is_modified, is_renamed, count(*) as totalCount'... 
                    ' FROM ' char(obj.table_name) ...
                    ' WHERE( is_deleted = 1 or is_added = 1 or is_modified = 1 or is_renamed = 1 ) '...
                    ' AND node_type = "block"'...
                    ' GROUP BY parent_sha, child_sha,Block_Type, is_deleted, is_added, is_modified, is_renamed) '...
                    ' ORDER BY Block_Type,change_type, totalCount)'...
                    ' )'...
                    ' ORDER BY median DESC'];
                
        result = fetch(obj.conn, median_query);
        [rows,~] = size(result);
         median_of_change = zeros(1,min(rows,10));
         blocktype_changetype = cell(1,min(rows,10));
         obj.WriteLog(sprintf('%s',median_query));
        for r = 1:min(rows,10)
            median_of_change(1,r) = result{r,3};  
            blockandchangeType = [result{r,1} ' ' result{r,2}];
            blocktype_changetype{1,r} = blockandchangeType;
        end

end

